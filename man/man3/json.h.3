.TH "src/cparse/json.h" 3 "Thu Feb 26 2015" "Version 0.1" "cParse" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/cparse/json.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include <stdlib\&.h>\fP
.br
\fC#include <cparse/defines\&.h>\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBcparse_json_object_foreach_start\fP(obj,  key,  val)"
.br
.ti -1c
.RI "#define \fBcparse_json_object_foreach_end\fP   } while(0)"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBcParseJsonType\fP { \fBcParseJsonNumber\fP, \fBcParseJsonReal\fP, \fBcParseJsonString\fP, \fBcParseJsonBoolean\fP, \fBcParseJsonObject\fP, \fBcParseJsonArray\fP, \fBcParseJsonNull\fP }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBcParseJson\fP * \fBcparse_json_new\fP ()"
.br
.ti -1c
.RI "\fBcParseJson\fP * \fBcparse_json_new_reference\fP (\fBcParseJson\fP *orig)"
.br
.ti -1c
.RI "\fBcParseJson\fP * \fBcparse_json_new_number\fP (\fBcParseNumber\fP)"
.br
.ti -1c
.RI "\fBcParseJson\fP * \fBcparse_json_new_real\fP (double)"
.br
.ti -1c
.RI "\fBcParseJson\fP * \fBcparse_json_new_bool\fP (bool value)"
.br
.ti -1c
.RI "\fBcParseJson\fP * \fBcparse_json_new_string\fP (const char *str)"
.br
.ti -1c
.RI "\fBcParseJson\fP * \fBcparse_json_new_array\fP ()"
.br
.ti -1c
.RI "void \fBcparse_json_copy\fP (\fBcParseJson\fP *orig, \fBcParseJson\fP *other, bool replaceOnConflict)"
.br
.ti -1c
.RI "void \fBcparse_json_free\fP (\fBcParseJson\fP *value)"
.br
.ti -1c
.RI "void \fBcparse_json_set\fP (\fBcParseJson\fP *obj, const char *key, \fBcParseJson\fP *value)"
.br
.ti -1c
.RI "void \fBcparse_json_set_number\fP (\fBcParseJson\fP *obj, const char *key, \fBcParseNumber\fP value)"
.br
.ti -1c
.RI "void \fBcparse_json_set_real\fP (\fBcParseJson\fP *obj, const char *key, double value)"
.br
.ti -1c
.RI "void \fBcparse_json_set_string\fP (\fBcParseJson\fP *obj, const char *key, const char *value)"
.br
.ti -1c
.RI "void \fBcparse_json_set_bool\fP (\fBcParseJson\fP *obj, const char *key, bool value)"
.br
.ti -1c
.RI "\fBcParseJson\fP * \fBcparse_json_get\fP (\fBcParseJson\fP *obj, const char *key)"
.br
.ti -1c
.RI "\fBcParseNumber\fP \fBcparse_json_get_number\fP (\fBcParseJson\fP *obj, const char *key, \fBcParseNumber\fP def)"
.br
.ti -1c
.RI "double \fBcparse_json_get_real\fP (\fBcParseJson\fP *obj, const char *key, double def)"
.br
.ti -1c
.RI "bool \fBcparse_json_get_bool\fP (\fBcParseJson\fP *obj, const char *key)"
.br
.ti -1c
.RI "const char * \fBcparse_json_get_string\fP (\fBcParseJson\fP *obj, const char *key)"
.br
.ti -1c
.RI "bool \fBcparse_json_is_array\fP (\fBcParseJson\fP *obj)"
.br
.ti -1c
.RI "cParseJsonType \fBcparse_json_type\fP (\fBcParseJson\fP *obj)"
.br
.ti -1c
.RI "int \fBcparse_json_num_keys\fP (\fBcParseJson\fP *obj)"
.br
.ti -1c
.RI "bool \fBcparse_json_contains\fP (\fBcParseJson\fP *obj, const char *key)"
.br
.ti -1c
.RI "void \fBcparse_json_remove\fP (\fBcParseJson\fP *obj, const char *key)"
.br
.ti -1c
.RI "\fBcParseJson\fP * \fBcparse_json_remove_and_get\fP (\fBcParseJson\fP *ob, const char *key)"
.br
.ti -1c
.RI "\fBcParseJson\fP * \fBcparse_json_tokenize\fP (const char *str)"
.br
.ti -1c
.RI "void \fBcparse_json_array_add_number\fP (\fBcParseJson\fP *array, \fBcParseNumber\fP value)"
.br
.ti -1c
.RI "void \fBcparse_json_array_add_real\fP (\fBcParseJson\fP *array, double value)"
.br
.ti -1c
.RI "void \fBcparse_json_array_add_bool\fP (\fBcParseJson\fP *array, bool value)"
.br
.ti -1c
.RI "void \fBcparse_json_array_add_string\fP (\fBcParseJson\fP *array, const char *value)"
.br
.ti -1c
.RI "void \fBcparse_json_array_add\fP (\fBcParseJson\fP *array, \fBcParseJson\fP *obj)"
.br
.ti -1c
.RI "\fBcParseNumber\fP \fBcparse_json_array_get_number\fP (\fBcParseJson\fP *array, size_t index)"
.br
.ti -1c
.RI "double \fBcparse_json_array_get_real\fP (\fBcParseJson\fP *array, size_t index)"
.br
.ti -1c
.RI "const char * \fBcparse_json_array_get_string\fP (\fBcParseJson\fP *array, size_t index)"
.br
.ti -1c
.RI "bool \fBcparse_json_array_get_bool\fP (\fBcParseJson\fP *array, size_t index)"
.br
.ti -1c
.RI "\fBcParseJson\fP * \fBcparse_json_array_get\fP (\fBcParseJson\fP *array, size_t index)"
.br
.ti -1c
.RI "size_t \fBcparse_json_array_size\fP (\fBcParseJson\fP *value)"
.br
.ti -1c
.RI "\fBcParseNumber\fP \fBcparse_json_to_number\fP (\fBcParseJson\fP *)"
.br
.ti -1c
.RI "double \fBcparse_json_to_real\fP (\fBcParseJson\fP *)"
.br
.ti -1c
.RI "bool \fBcparse_json_to_bool\fP (\fBcParseJson\fP *)"
.br
.ti -1c
.RI "const char * \fBcparse_json_to_string\fP (\fBcParseJson\fP *value)"
.br
.ti -1c
.RI "const char * \fBcparse_json_to_json_string\fP (\fBcParseJson\fP *value)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define cparse_json_object_foreach_end   } while(0)"
the end block for a json object iterator 
.SS "#define cparse_json_object_foreach_start(obj, key, val)"
\fBValue:\fP
.PP
.nf
do { \
        char *key; struct json_object *val; struct lh_entry *entry;\
        for(entry = json_object_get_object(obj)->head; entry && ( ( (key = (char*)entry->k)  || entry) && ( (val = (struct json_object*)entry->v)  || entry)); entry = entry->next )
.fi
a start block for a json object iterator \fIexample\fP: 
.PP
.nf
cparse_json_object_foreach_start(obj, myKey, myVar)
{
    do_something(myKey, myVar);
}
cparse_json_object_foreach_end;

.fi
.PP
 
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP the object instance 
.br
\fIkey\fP the name of the key variable 
.br
\fIval\fP the name of the value variable 
.RE
.PP

.SH "Function Documentation"
.PP 
.SS "void cparse_json_array_add (\fBcParseJson\fP * array, \fBcParseJson\fP * obj)"
adds a json object to an array json object 
.PP
\fBParameters:\fP
.RS 4
\fIarray\fP the array instance 
.br
\fIvalue\fP the json object value to add 
.RE
.PP

.SS "void cparse_json_array_add_bool (\fBcParseJson\fP * array, bool value)"
adds a boolean to an array json object 
.PP
\fBParameters:\fP
.RS 4
\fIarray\fP the array instance 
.br
\fIvalue\fP the boolean value to add 
.RE
.PP

.SS "void cparse_json_array_add_number (\fBcParseJson\fP * array, \fBcParseNumber\fP value)"
adds a number to an array json object 
.PP
\fBParameters:\fP
.RS 4
\fIarray\fP the array instance 
.br
\fIvalue\fP the number value to add 
.RE
.PP

.SS "void cparse_json_array_add_real (\fBcParseJson\fP * array, double value)"
adds a floating point to an array json object 
.PP
\fBParameters:\fP
.RS 4
\fIarray\fP the array instance 
.br
\fIvalue\fP the floating point value to add 
.RE
.PP

.SS "void cparse_json_array_add_string (\fBcParseJson\fP * array, const char * value)"
adds a string to an array json object 
.PP
\fBParameters:\fP
.RS 4
\fIarray\fP the array instance 
.br
\fIvalue\fP the string value to add 
.RE
.PP

.SS "\fBcParseJson\fP* cparse_json_array_get (\fBcParseJson\fP * array, size_t index)"
gets a json object from a position in a json array\&. 
.PP
\fBParameters:\fP
.RS 4
\fIarray\fP the array instance 
.br
\fIindex\fP the position in the array 
.RE
.PP
\fBReturns:\fP
.RS 4
the object value or NULL if not found 
.RE
.PP

.SS "bool cparse_json_array_get_bool (\fBcParseJson\fP * array, size_t index)"
gets a boolean from a position in a json array\&. 
.PP
\fBParameters:\fP
.RS 4
\fIarray\fP the array instance 
.br
\fIindex\fP the position in the array 
.RE
.PP
\fBReturns:\fP
.RS 4
the boolean value or NULL 
.RE
.PP

.SS "\fBcParseNumber\fP cparse_json_array_get_number (\fBcParseJson\fP * array, size_t index)"
gets a number from a position in a json array\&. if no conversion is possible errno is set to EINVAL\&. 
.PP
\fBParameters:\fP
.RS 4
\fIarray\fP the array instance 
.br
\fIindex\fP the position in the array 
.RE
.PP
\fBReturns:\fP
.RS 4
the number value or zero if no conversion 
.RE
.PP

.SS "double cparse_json_array_get_real (\fBcParseJson\fP * array, size_t index)"
gets a floating point from a position in a json array\&. if no conversion is possible errno is set to EINVAL\&. 
.PP
\fBParameters:\fP
.RS 4
\fIarray\fP the array instance 
.br
\fIindex\fP the position in the array 
.RE
.PP
\fBReturns:\fP
.RS 4
the floating point value or zero if no conversion 
.RE
.PP

.SS "const char* cparse_json_array_get_string (\fBcParseJson\fP * array, size_t index)"
gets a string from a position in a json array\&. 
.PP
\fBParameters:\fP
.RS 4
\fIarray\fP the array instance 
.br
\fIindex\fP the position in the array 
.RE
.PP
\fBReturns:\fP
.RS 4
the string value or zero if no conversion 
.RE
.PP

.SS "bool cparse_json_contains (\fBcParseJson\fP * obj, const char * key)"
tests if a json object contains a key 
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP the json object instance 
.br
\fIkey\fP the key identifying the attribute 
.RE
.PP
\fBReturns:\fP
.RS 4
true if the object contains the key 
.RE
.PP

.SS "void cparse_json_copy (\fBcParseJson\fP * orig, \fBcParseJson\fP * other, bool replaceOnConflict)"
copies one json object into another 
.PP
\fBParameters:\fP
.RS 4
\fIorig\fP the first json object 
.br
\fIother\fP the second json object 
.br
\fIreplaceOnConflict\fP a flag indicating if duplicate values should be replaced with the second object 
.RE
.PP

.SS "void cparse_json_free (\fBcParseJson\fP * value)"
deallocates a json object 
.PP
\fBParameters:\fP
.RS 4
\fIvalue\fP the json object to deallocate 
.RE
.PP

.SS "\fBcParseJson\fP* cparse_json_get (\fBcParseJson\fP * obj, const char * key)"
gets a json attribute 
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP the json object instance 
.br
\fIkey\fP the key identifying the attribute 
.RE
.PP

.SS "bool cparse_json_get_bool (\fBcParseJson\fP * obj, const char * key)"
gets a boolean attribute 
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP the json object instance 
.br
\fIkey\fP the key identifying the attribute 
.RE
.PP

.SS "\fBcParseNumber\fP cparse_json_get_number (\fBcParseJson\fP * obj, const char * key, \fBcParseNumber\fP def)"
gets a number attribute\&. if no conversion is possible errno is set to EINVAL\&. 
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP the json object instance 
.br
\fIkey\fP the key identifying the attribute 
.RE
.PP
\fBReturns:\fP
.RS 4
the number of zero if no conversion 
.RE
.PP

.SS "double cparse_json_get_real (\fBcParseJson\fP * obj, const char * key, double def)"
gets a floating point attribute\&. if no conversion is possible errno is set to EINVAL\&. 
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP the json object instance 
.br
\fIkey\fP the key identifying the attribute 
.RE
.PP
\fBReturns:\fP
.RS 4
the floating point or 0\&.0 
.RE
.PP

.SS "const char* cparse_json_get_string (\fBcParseJson\fP * obj, const char * key)"
gets a string attribute 
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP the json object instance 
.br
\fIkey\fP the key identifying the attribute 
.RE
.PP

.SS "bool cparse_json_is_array (\fBcParseJson\fP * obj)"
tests if a json object is an array object 
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP the json object instance 
.RE
.PP
\fBReturns:\fP
.RS 4
true if the object is an array 
.RE
.PP

.SS "\fBcParseJson\fP* cparse_json_new ()"
allocates a new json object 
.PP
\fBReturns:\fP
.RS 4
the allocated json object 
.RE
.PP

.SS "\fBcParseJson\fP* cparse_json_new_array ()"
creates an array json object 
.PP
\fBReturns:\fP
.RS 4
the array json object 
.RE
.PP

.SS "\fBcParseJson\fP* cparse_json_new_bool (bool value)"
creates a bool as a json object 
.PP
\fBParameters:\fP
.RS 4
\fIvalue\fP the boolean value 
.RE
.PP
\fBReturns:\fP
.RS 4
the value as a json object 
.RE
.PP

.SS "\fBcParseJson\fP* cparse_json_new_number (\fBcParseNumber\fP)"
creates a number as a json object 
.PP
\fBParameters:\fP
.RS 4
\fInumber\fP the number 
.RE
.PP
\fBReturns:\fP
.RS 4
the number as a json object 
.RE
.PP

.SS "\fBcParseJson\fP* cparse_json_new_real (double)"
creates a floating point number as a json object 
.PP
\fBParameters:\fP
.RS 4
\fInumber\fP the floating point number 
.RE
.PP
\fBReturns:\fP
.RS 4
the floating point number as a json object 
.RE
.PP

.SS "\fBcParseJson\fP* cparse_json_new_reference (\fBcParseJson\fP * orig)"
increments the reference count on a json object so it is safe to use after deallocation 
.PP
\fBParameters:\fP
.RS 4
\fIorig\fP the original object 
.RE
.PP
\fBReturns:\fP
.RS 4
the object with an incremented reference count 
.RE
.PP

.SS "\fBcParseJson\fP* cparse_json_new_string (const char * str)"
creates a string as a json object 
.PP
\fBParameters:\fP
.RS 4
\fIvalue\fP the string value 
.RE
.PP
\fBReturns:\fP
.RS 4
the string as a json object 
.RE
.PP

.SS "int cparse_json_num_keys (\fBcParseJson\fP * obj)"
gets the number of keys in a json object 
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP the json object instance 
.RE
.PP
\fBReturns:\fP
.RS 4
the number of keys in the object 
.RE
.PP

.SS "void cparse_json_remove (\fBcParseJson\fP * obj, const char * key)"
removes an attribute from a json object 
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP the json object instance 
.br
\fIkey\fP the key identifying the attribute 
.RE
.PP
\fBReturns:\fP
.RS 4
the removed attribute 
.RE
.PP

.SS "void cparse_json_set (\fBcParseJson\fP * obj, const char * key, \fBcParseJson\fP * value)"
sets a json attribute 
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP the json instance 
.br
\fIkey\fP the key identifying the value 
.br
\fIvalue\fP the json object attribute 
.RE
.PP

.SS "void cparse_json_set_bool (\fBcParseJson\fP * obj, const char * key, bool value)"
sets a boolean attribute 
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP the json instance 
.br
\fIkey\fP the key identifying the value 
.br
\fIvalue\fP the boolean attribute 
.RE
.PP

.SS "void cparse_json_set_number (\fBcParseJson\fP * obj, const char * key, \fBcParseNumber\fP value)"
sets a number attribute 
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP the json instance 
.br
\fIkey\fP the key identifying the value 
.br
\fIvalue\fP the number attribute 
.RE
.PP

.SS "void cparse_json_set_real (\fBcParseJson\fP * obj, const char * key, double value)"
sets a floating point attribute 
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP the json instance 
.br
\fIkey\fP the key identifying the value 
.br
\fIvalue\fP the floating point attribute 
.RE
.PP

.SS "void cparse_json_set_string (\fBcParseJson\fP * obj, const char * key, const char * value)"
sets a string attribute 
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP the json instance 
.br
\fIkey\fP the key identifying the value 
.br
\fIvalue\fP the string attribute 
.RE
.PP

.SS "bool cparse_json_to_bool (\fBcParseJson\fP *)"
gets the boolean value of an object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP the json object instance 
.RE
.PP
\fBReturns:\fP
.RS 4
the boolean value or zero 
.RE
.PP

.SS "const char* cparse_json_to_json_string (\fBcParseJson\fP * value)"
converts a json object to a formated json string 
.PP
\fBParameters:\fP
.RS 4
\fIvalue\fP the json object instance 
.RE
.PP
\fBReturns:\fP
.RS 4
the json string 
.RE
.PP

.SS "\fBcParseNumber\fP cparse_json_to_number (\fBcParseJson\fP *)"
gets the number value of an object\&. if no conversion possible errno is set to EINVAL 
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP the json object instance 
.RE
.PP
\fBReturns:\fP
.RS 4
the number value or zero 
.RE
.PP

.SS "double cparse_json_to_real (\fBcParseJson\fP *)"
gets the floating point value of an object\&. if no conversion possible errno is set to EINVAL 
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP the json object instance 
.RE
.PP
\fBReturns:\fP
.RS 4
the floating point value or zero 
.RE
.PP

.SS "const char* cparse_json_to_string (\fBcParseJson\fP * value)"
gets the string value of an object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP the json object instance 
.RE
.PP
\fBReturns:\fP
.RS 4
the string value or zero 
.RE
.PP

.SS "\fBcParseJson\fP* cparse_json_tokenize (const char * str)"
creates a json object from a string 
.PP
\fBParameters:\fP
.RS 4
\fIstr\fP the json string 
.RE
.PP
\fBReturns:\fP
.RS 4
a json object or NULL if str was not valid json 
.RE
.PP

.SS "cParseJsonType cparse_json_type (\fBcParseJson\fP * obj)"
gets the type of json object 
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP the object instance 
.RE
.PP
\fBReturns:\fP
.RS 4
a json type of #cParseJSONType 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for cParse from the source code\&.
